/*	сохраняем данный файл в кодировке UTF-8		*/

//===================================================



/*

	Распиновка:
	
		SDO/MISO	- MISO
		LED			- +3.3V or PWM если нужно менять яркость
		SCK			- SCK
		SDI/MOSI	- MOSI
		DC/RS		- ВС онже вібор команда или данніе
		RESET		- RESET
		CS			- CS
		GND			- GND
		VCC			- +3.3V

*/


//----- SPI2 parameter configuration ----------------------------------------
// ставим максимальную скорость, 8 бит
// для сенсорной панели нужно в коде менять скорость ( ниже есть пример )
//-----------------------------------------------------------------------------



в файле fonts.h нужно выбрать шрифты:

//---- для экономии памяти шрифты которые не используються закоментировать -------------------------------------
			// Шрифт имеет кирилицу и латиницу
			#define FONT_6x8		//  6 x 8 pixels font size structure 
			#define FONT_7x9		//  7 x 9 pixels font size structure 
			#define FONT_11x18		//  11 x 18 pixels font size structure 
			#define FONT_16x26		//  16 x 26 pixels font size structure 
			// Только цифры -- only numbers
			#define FONT_16x28		//  16 x 28 pixels font size structure only numbers	
//--------------------------------------------------------------------------------------------------------------

в файле ili9341.h указываем настройки:

//#######  SETUP  ##############################################################################################
		
		//==== выбераем через что будем отправлять через HAL или CMSIS(быстрее) ==================
		//-- нужное оставляем другое коментируем ( важно должно быть только один выбран )---------
		
			// указываем порт SPI для CMSIS ( быстро )-------
			// так как у разных МК разные регистры то в функциях корректируем под свой МК
			// на данный момент есть реализация на серию F1 F4 H7 для выбора серии в функциях
			//	void ILI9341_SendCmd(uint8_t Cmd);
			//	void ILI9341_SendData(uint8_t Data );
			//  void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color);			
			// комментируем и раскомментируем то что нам нужно, также там же редактируем под свой МК если не работает
			#define 	ILI9341_SPI_CMSIS 		SPI2
			//-----------------------------------------------
			
			// указываем порт SPI для HAL ( медлено )--------
			//#define 	ILI9341_SPI_HAL 		hspi2
			//-----------------------------------------------

		//============================================================================
			
			// выбираем как выводить информацию через буфер кадра или попиксельно ( 1-буфер кадра, 0-попиксельный вывод ) -----
			// через буфер быстре если много информации обнавлять за один раз ( требует много оперативки для массива )
			// по пиксельно рисует онлайн буз буферра если информация обновляеться немного то выгодно испотзовать данный режим
			#define FRAME_BUFFER				0
			//-----------------------------------------------------------------------------------------------------------------
			
		//=== указываем порты ( если в кубе назвали их DC RESET CS то тогда нечего указывать не нужно )
		#if defined (DC_GPIO_Port)	// RES
		#else
			#define DC_GPIO_Port	GPIOA
			#define DC_Pin			GPIO_PIN_10
		#endif
		
		#if defined (RESET_GPIO_Port)
		#else
			#define RESET_GPIO_Port   GPIOA
			#define RESET_Pin			GPIO_PIN_12
		#endif

		//--  Cесли используем порт CS для выбора устройства тогда раскомментировать ------------
		// если у нас одно устройство лучше пин CS притянуть к земле( или на порту подать GND )
		
		#define CS_PORT
		
		//----------------------------------------------------------------------------------------
		#ifdef CS_PORT
			#if defined (CS_GPIO_Port)
			#else
				#define CS_GPIO_Port    GPIOA
				#define CS_Pin			GPIO_PIN_14
			#endif
		#endif
		
		//=============================================================================
		
	
//##############################################################################################################





//=========================================================


#include "ili9341.h"
#include "ili9341_touch.h"

#include "fonts.h"
#include "bitmap.h"


	.........
	.........

main()=============================================================================================================================
	

//------- ЕСЛИ ИСПОЛЬЗУЕМ СЕНСОРНУЮ ПАНЕЛЬ  -------------------------------------------
//-- устанавливаем прескаллер на 2 у SPI так как сам дисплей работает на большой максимальной скорости
// а если экран со сенсорной панелью ьо она работает на более слабой скорости 1.3М там прескаллер больше

//	if(HAL_SPI_DeInit(&hspi2) != HAL_OK) {
//        // printf("HAL_SPI_DeInit failed!\r\n");
//        return 0;
//    }

//    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;

//    if(HAL_SPI_Init(&hspi2) != HAL_OK) {
//        // printf("HAL_SPI_Init failed!\r\n");
//        return 0;
//    }
//----------------------------------------------------------------------------------

	// на тот случай если уровни на портах CS выставили не те по умолчанию
	ILI9341_Unselect();
	
	// Процедура инициализации Touch
	ILI9341_TouchUnselect();
	
	
	// Процедура инициализации дисплея
    ILI9341_Init();
	
	
    // закрашиваем весь экран указаным цветом 
    ILI9341_FillScreen( RGB565( 100, 150, 10 ) );
	//#if FRAME_BUFFER	// если включен буфер кадра
	//		ST7789_Update();
	//#endif	
	
	// печатаем символ ( один ) параметры: х,  у,  цвет символа, цвет фона, вкл/выкл фон, размер шрифта, множитель шрифта (увеличивает в х раз шрифт ), сам символ
	 ILI9341_DrawChar( 0, 0, RGB565( 255, 255, 10 ) , RGB565( 0, 10, 10 ) , 0, &Font_16x26, 1, 'F' );
	//#if FRAME_BUFFER	// если включен буфер кадра
	//		ST7789_Update();
	//#endif
	
	HAL_Delay(1000);
	
	
	// печатаем строку параметры: х,  у,  цвет строки, цвет фона, вкл/выкл фон, размер шрифта, множитель шрифта (увеличивает в х раз шрифт ), сама строка
	ILI9341_print( 110, 10, RGB565(255, 255, 255) , RGB565(50, 50, 10) , 1, &Font_6x8, 1, "Привет Hello Вася" );
	//#if FRAME_BUFFER	// если включен буфер кадра
	//		ST7789_Update();
	//#endif
	
	// печатаем символ с указаным углом, параметры: х,  у, ( начиная с 0 ), цвет строки, цвет фона, вкл/выкл фон, размер шрифта, множитель шрифта (увеличивает в х раз шрифт ), угол поворота (0.0 - 360.0), самсимвол ( поддерживает кириллицу )
	ST7789_DrawCharWithAngle( 50, 50, RGB565(255, 255, 255) , RGB565(0, 10, 100) , 1, &Font_11x18, 1, 90.0, 'R' );
	//#if FRAME_BUFFER	// если включен буфер кадра
	//		ST7789_Update();
	//#endif
	
	// печатаем строку с указаным углом, параметры: х,  у, ( начиная с 0 ), цвет строки, цвет фона, вкл/выкл фон, размер шрифта, множитель шрифта (увеличивает в х раз шрифт ), угол поворота (0.0 - 360.0), сама строка ( поддерживает кириллицу )
	ST7789_printWithAngle( 100, 100, RGB565(255, 255, 255) , RGB565(0, 10, 100) , 1, &Font_11x18, 1, 180.0, "STM32 TFT" );
	//#if FRAME_BUFFER	// если включен буфер кадра
	//		ST7789_Update();
	//#endif
	
	HAL_Delay(1000);
	
	// рисуем пиксель 
	ILI9341_DrawPixel( 20, 20, RGB565(0, 0, 255) );
	
	HAL_Delay(1000);
	
	// вкл/выкл дисплея 0-выкл 1- вкл
	ILI9341_DisplayPower( 0 );
	
	HAL_Delay(1000);
	
	// вкл/выкл дисплея 0-выкл 1- вкл
	ILI9341_DisplayPower( 1 );
	
	HAL_Delay(1000);
	
	// рисуем цветную иконку. параметры координаты х и у, размер иконки шир и выс, имя иконки ( массив )
	ILI9341_DrawImage( 50, 50, 85, 53, logoRGB );
	//#if FRAME_BUFFER	// если включен буфер кадра
	//		ST7789_Update();
	//#endif
	
	HAL_Delay(1000);	
	
	// переход в спящий режим
	ILI9341_SleepModeEnter();

	HAL_Delay(1000);

	// выход их спящего режима
	ILI9341_SleepModeExit();
	
	HAL_Delay(1000);
	
	// очистка экрана - закрашивает экран цветом черный
	ILI9341_Clear();
	// очистка только буфера кадра  ( при етом сам экран не очищаеться )
	//	#if FRAME_BUFFER	// если включен буфер кадра
	//			ST7789_ClearFrameBuffer();
	//	#endif
				
	HAL_Delay(1000);
	
	// линия
	ILI9341_DrawLine(50, 50, 70, 90, RGB565(255, 255, 0));
	
	// рисуем линию с указаным углом и длиной ( начальные координаты, длина линии, угол поворота (0-360), и цвет линии )
	ST7789_DrawLineWithAngle(100, 100, 50, 45.0, RGB565(255, 255, 255));
	
	HAL_Delay(1000);

	// прямоугольник закрашеный
	ILI9341_DrawRectangleFilled(70, 200, 100, 20, RGB565(0, 255, 0)) ;
	
	HAL_Delay(1000);
	
	// прямоугольник пустотелый
	ILI9341_DrawRectangle(70, 200, 100, 20, RGB565(255, 0, 0)) ;
	
	HAL_Delay(1000);
	
	
	// рисуем треугольник пустотелый
	ILI9341_DrawTriangle(20, 40, 150, 100, 200, 200, RGB565(100, 255, 150) );
	
	HAL_Delay(1000);
	
	// рисуем треугольник закрашеный
	ILI9341_DrawFilledTriangle(20, 40, 150, 100, 200, 200, RGB565(100, 255, 150) );
	
	HAL_Delay(1000);
	
	
	// круг пустотелый
	ILI9341_DrawCircle(100, 100, 50, RGB565(255, 0, 255));
	
	HAL_Delay(1000);

	// круг закрашеный
	ILI9341_DrawCircleFilled(200, 200, 20, RGB565(255, 40, 255)) ;
	
	// рисуем элипс ( координаты центра, радиус по Х радиус по У, цвет )
	ST7789_DrawEllipse( 150, 150, 20, 80, RGB565(0, 0, 255) );
	
	// рисуем элипс закрашенный ( координаты центра, радиус по Х радиус по У, цвет )
	ST7789_DrawEllipseFilled( 150, 150, 80, 20, RGB565(0, 0, 255) );
	
	// рисуем элипс под указаным углом наклона ( координаты центра, радиус по Х радиус по У, угол поворота (0-360), цвет )
	ST7789_DrawEllipseWithAngle( 150, 150, 80, 20, 45.0, RGB565(0, 0, 255) );
	
	// рисуем элипс закрашенный под указаным углом наклона ( координаты центра, радиус по Х радиус по У, угол поворота (0-360), цвет )
	ST7789_DrawEllipseFilledWithAngle( 150, 150, 80, 20, 200.0, RGB565(0, 255, 0) );
	
	// рисуем прямоугольник с закругленными краями ( закрашенный )
	ILI9341_DrawFillRoundRect(10, 10, 50, 50, 10, RGB565(100, 255, 150));
	
	// рисуем прямоугольник с закругленными краями ( пустотелый )
	ILI9341_DrawRoundRect(10, 10, 50, 50, 10, RGB565(100, 255, 150));
	
	// рисуем полукруг ( правое или левое полушарие (параметр 1 или 2) ) закрашенный
	ILI9341_DrawFillCircleHelper(30, 30, 20 , 1, 0, RGB565(100, 255, 150));
	
	// рисуем дугу ( четверть круга (параметр 1, 2, 4, 8) ) шириной 1 пиксель
	ILI9341_DrawCircleHelper(30, 30, 20 , 1, RGB565(100, 255, 150));
	
	// рисованиe дуга толстая ( часть круга ) ( координаты центра, радиус, начальный и конечный угол (0-360), цвет линии, толщина линии)
	// если нужно нарисовать наоборот другую часть то меняем начальный угол и конечный местами
	ST7789_DrawArc(100, 100, 50, 320, 220, RGB565(255, 255, 0), 5);
	ST7789_DrawArc(100, 100, 50, 220, 320, RGB565(255, 0, 255), 5);
	//#if FRAME_BUFFER	// если включен буфер кадра
	//		ST7789_Update();
	//#endif
	
	// линия толстая ( последний параметр толшина )
	ILI9341_DrawLineThick(10, 120, 200, 140, RGB565(255, 255, 0), 5);
	
	// линия толстая нужной длины и указаным углом поворота (0-360) ( последний параметр толшина )
	ST7789_DrawLineThickWithAngle( 100, 100, 80, 90.0, RGB565(255, 255, 0), 10 );
	//#if FRAME_BUFFER	// если включен буфер кадра
	//		ST7789_Update();
	//#endif
	
	HAL_Delay(1000);
	
	// рисуем монохромную иконку. параметры координаты х и у, имя иконки ( массив ), размер иконки шир и выс, цвет отображения
	ILI9341_DrawBitmap( 60, 120, logo, 128, 27, RGB565(255, 0, 0) );
	
	// рисуем монохромную иконку с указаным углом поворота, параметры координаты х и у ( начиная с 0 ), имя иконки ( массив ), размер иконки шир и выс, цвет отображения, угол поворота (0-360)
	ST7789_DrawBitmapWithAngle( 60, 150, logo, 128, 27, RGB565(255, 255, 255), 10.0 );
	//#if FRAME_BUFFER	// если включен буфер кадра
	//		ST7789_Update();
	//#endif
	
	HAL_Delay(1000);
	
	// установка ротации дисплея не обязательно так как по умолчанию стоит режим 1 ( всего 4 режима 1,2,3,4 )
	ILI9341_rotation( 2 );
	
	// печатаем строку параметры: х,  у,  цвет строки, цвет фона, вкл/выкл фон, размер шрифта, множитель шрифта (увеличивает в х раз шрифт ), сама строка
	ILI9341_print( 2, 2, RGB565(255, 255, 0) , RGB565(150, 50, 10) , 0, &Font_11x18, 1, "Привет Hello Вася" );
	 
	HAL_Delay(1000);
	
	// установка ротации дисплея не обязательно так как по умолчанию стоит режим 1 ( всего 4 режима 1,2,3,4 )
	ILI9341_rotation( 3 );
	
	// печатаем строку параметры: х,  у,  цвет строки, цвет фона, вкл/выкл фон, размер шрифта, множитель шрифта (увеличивает в х раз шрифт ), сама строка
	ILI9341_print( 2, 2, RGB565(255, 255, 0) , RGB565(150, 50, 10) , 0, &Font_11x18, 1, "Привет Hello Вася" );
	 
	HAL_Delay(1000);
	
	
	// установка ротации дисплея не обязательно так как по умолчанию стоит режим 1 ( всего 4 режима 1,2,3,4 )
	ILI9341_rotation( 4 );
	
	// печатаем строку параметры: х,  у,  цвет строки, цвет фона, вкл/выкл фон, размер шрифта, множитель шрифта (увеличивает в х раз шрифт ), сама строка
	ILI9341_print( 2, 2, RGB565(255, 255, 0) , RGB565(150, 50, 10) , 0, &Font_11x18, 1, "Привет Hello Вася" );
	 
	HAL_Delay(1000);
	
	// установка ротации дисплея не обязательно так как по умолчанию стоит режим 1 ( всего 4 режима 1,2,3,4 )
	ILI9341_rotation( 1 );
	
	// печатаем строку параметры: х,  у,  цвет строки, цвет фона, вкл/выкл фон, размер шрифта, множитель шрифта (увеличивает в х раз шрифт ), сама строка
	ILI9341_print( 2, 2, RGB565(255, 255, 0) , RGB565(150, 50, 10) , 0, &Font_11x18, 1, "Привет Hello Вася" );
	 
	HAL_Delay(1000);
	
	ILI9341_rotation( 2 );
	
	ILI9341_DrawImage( 80, 80, 85, 53, imgRGB	);
	HAL_Delay(3000);
	
	
	
	//=   работа со сенсорной панелью =====================================================
	
	// переводим SPI на меньшую скорость 
	// Warning! Use SPI bus with < 1.3 Mbit speed, better ~650 Kbit to be save.
	//-----------------------------------------------------
			if(HAL_SPI_DeInit(&hspi2) != HAL_OK) {
				//printf("HAL_SPI_DeInit failed!\r\n");
				return 0;
			}

			hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;

			if(HAL_SPI_Init(&hspi2) != HAL_OK) {
				// printf("HAL_SPI_Init failed!\r\n");
				return 0;
			}
	//-------------------------------------------------
	
	// получаем координаты со сенсора и тутже отображаем их на экране
	
	int npoints = 0;
    while(npoints < 10000) {
        uint16_t x, y;

        if(ILI9341_TouchGetCoordinates(&x, &y)) {
            ILI9341_DrawPixel(x, 320-y, ILI9341_WHITE);
            npoints++;
        } 
    }
	
	
	
	.........
	.........
	.........

while(1)===========================================================================================================================

	.........
	.........
	.........
	.........

=== end while(1) ==================================================================================================================
=== end main() ====================================================================================================================
